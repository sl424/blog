var express = require('express');
var app = express();
var request = require('request');
var handlebars = require('express-handlebars').create({defaultlayout:'main'});
//var session = require('express-session');

//var https = require('https');
var parseString = require('xml2js').parseString;
var xml = '';
var url = "https://feed43.com/calvin-hobbes-spanish.xml"

function xmlToJson(url, callback) {
  var req = https.get(url, function(res) {
    var xml = '';
    res.on('data', function(chunk) { xml += chunk; });
    res.on('error', function(e) { callback(e, null); }); 
    res.on('timeout', function(e) { callback(e, null); }); 
    res.on('end', function() { parseString(xml, function(err, result) { callback(null, result); }); });
  });
}

function htmlTourl(url, callback) {
  var req = https.get(url, function(res) {
    var html = '';
    res.on('data', function(chunk) { html += chunk; });
    res.on('error', function(e) { callback(e, null); }); 
    res.on('timeout', function(e) { callback(e, null); }); 
    res.on('end', function() { callback(null, html); });
    //res.on('end', function() { parseString(html, function(err, result) { callback(null, result); }); });
  });
}


//encrypted channel
//fs = require('fs')
const https = require('https');
const fs = require('fs');
const options = {
	    cert: fs.readFileSync('./ssl/fullchain.pem'),
			    key: fs.readFileSync('./ssl/privkey.pem')
};
function requireHTTPS(req, res, next) {
    if (!req.secure) {
        //FYI this should work for local development as well
        return res.redirect('https://' + req.get('host') + req.url);
    }
    next();
}
app.use(requireHTTPS);
app.use(require('helmet')());


var bodyParser = require('body-parser');
app.engine('handlebars',handlebars.engine);
app.set('view engine', 'handlebars');
app.set('port', 8080);
//var pass = "123";

app.use(express.static('public'));
//app.use(session({secret:pass}));

var subdomain = require('express-subdomain');
var router = express.Router();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
var key = require('./credential.js');

var mysql = require('./connection.js');
//var pool = mysql.pool;
//var owaID="fa7d80c48643dfadde2cced1b1be6ca1";
//var appID = 'c47acb4ad586f4224feb794843d48138';
//var owaID = key.owaID;
//var appID = key.appID;
//var city = 'Corvallis';
//var state = 'OR';
//

var router = express.Router();
app.use(subdomain('api', router));

var blog = express.Router();
app.use(subdomain('blog', blog));

var slides = express.Router();
app.use(subdomain('slides', slides));


jsonFm = require('json-front-matter').parse

var Poet = require('poet');
var markdown = require( "markdown" ).markdown;

/*************************
//slides specific routes 
 *********************/
slides.get('/', function (req, res) {
	var file = './slides/index.html';
	fs.readFile(file, 'utf8', function (err,data) {
		res.header("Content-Type",'text/html');
		res.send(data);
	});
});

slides.get('/:slide', function (req, res) {
	var file = './slides/'+req.params.slide;
	fs.readFile(file, 'utf8', function (err,data) {
		res.header("Content-Type",'text/html');
		res.send(data);
	});
});


/*************************
//blog specific routes 
 *********************/
blog.get('/', function (req, res) {
	//res.send('Welcome to our blog!\n');
	var file = './blog/allposts.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		var post = parsed.attributes;
		post.body = markdown.toHTML(parsed.body);
		post.script = as[getRand()];
		res.render('blog', post);
	});
});

blog.get('/:post', function (req, res) {
	var file = './blog/'+req.params.post+'.md';
	if(!fs.existsSync(file)) {
		res.status(404);
		res.render('404');
	} else {
		fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		var post = parsed.attributes;
		post.body = markdown.toHTML(parsed.body);
		post.script = as[getRand()];
		res.render('blog', post);
		});
	}
});


/*************************
//api specific routes 
 *********************/
router.get('/', function(req, res) {
    //res.send('Welcome to our API!\n');
			//+ 'GET\n'
			//+ '  /intro\n' + '  /projects\n' + '  /resume\n' + '  /contact\n');
	var file = './core/root.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		res.header("Content-Type",'application/json');
		res.send(JSON.stringify(parsed.attributes, null, 4));
	});
});

router.get('/intro', function(req, res) {
	var file = './core/index.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		res.header("Content-Type",'application/json');
		res.send(JSON.stringify(parsed, null, 4));
	});
});



router.get('/resume', function(req, res) {
	var file = './core/resume.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		res.header("Content-Type",'application/json');
		res.send(JSON.stringify(parsed.attributes, null, 4));
	});
});

router.get('/contact', function(req, res) {
	var file = './core/contact.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		res.header("Content-Type",'application/json');
		res.send(JSON.stringify(parsed.attributes, null, 4));
	});
});


router.get('/blog', function(req, res) {
	var file = './blog/allposts.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		res.header("Content-Type",'application/json');
		res.send(JSON.stringify(parsed.attributes, null, 4));
	});
});

router.get('/blog', function(req, res) {
	var file = './blog/allposts.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		res.header("Content-Type",'application/json');
		res.send(JSON.stringify(parsed.attributes, null, 4));
	});
});

router.get('/projects', function(req, res) {
	var context = {};
	try {
	mysql.pool.query('SELECT * FROM pjs_list WHERE id NOT IN (5) order by id desc ', function(err, rows, fields){
		if(err){ next(err); return; }
		//context.results = JSON.stringify(rows);
		rows.forEach(function(r){
			mysql.pool.query('SELECT * FROM links WHERE pjs_id=?',[r.id],function(err, rows, fields){
				r['links'] = rows;
			});
		});
		//context.results = rows;
		//res.render('pjs', context);
		var file = './core/projects.md';
		fs.readFile(file, 'utf8', function (err,data) {
			var parsed = jsonFm(data);
			var post = parsed.attributes;
			post.projects = rows;
			res.header("Content-Type",'application/json');
			res.send(JSON.stringify(post, null, 4));
		});
		//res.json(context);
	});
	} finally {
		var file = './core/projects.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		res.header("Content-Type",'application/json');
		res.send(JSON.stringify(parsed.attributes, null, 4));
	});
	}
	/*
		mysql.pool.query('SELECT * FROM pjs_list order by id desc', 
			function(err, rows, fields){
			res.header("Content-Type",'application/json');
			res.send(JSON.stringify(
				rows.map(function(a){
				return {project:a.name, description:a.msg}
				}), null, 4));
		});
		*/
});

/*************************
 * main SITE
 *********************/
var as = ['startrek.js', 'particles.js', 'tessellactation.js'];
function getRand() {
	var min = 0;
	var max = 2;
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

app.get('/',function(req,res){
	var urlstr;
  var uu2 = "https://www.gocomics.com/calvinandhobbesespanol/"
	var d1 = new Date();
	d1.setDate(d1.getDate() -1 );
	var dd = d1.toISOString().replace(/T.*/, '').replace(/-/g,'/');
	uu2 = uu2+dd;

	//xmlToJson(url, function(err, data){
	htmlTourl(uu2, function(err, data){
		//console.log(JSON.stringify(data.rss.channel[0].item[0].description[0], null, 2));
		//
		try {
		  var regexp = /https:\/\/assets.amuniversal.com\/[^"]*/i
			//urlstr = JSON.stringify(data.rss.channel[0].item[0].description[0], null, 2);
			urlstr = data.match(regexp)[0];
		//	console.log(uu2);
			// console.log(data);
			console.log(urlstr);
		} catch(e){ console.log("no comic today"); }

		var file = './core/index.md';
		fs.readFile(file, 'utf8', function (err,data) {
			var parsed = jsonFm(data);
			var post = parsed.attributes;
			post.body = markdown.toHTML(parsed.body);
			post.script = as[getRand()];
			try{
			//urlstr = urlstr.replace(/\\\"/g, "'");
			//urlstr = urlstr.replace(/\"/g, "");
			//urlstr = urlstr.replace(/http/g, "https");
			//console.log(urlstr);
			urlstr = "<img src="+urlstr+">";
			post.comic = urlstr;
			} catch(e){console.log("no comic");}
			res.render('index', post);
		});
	});
});


app.get('/resume',function(req,res){
  //res.render('resume');
	var file = './core/resume.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		var post = parsed.attributes;
		post.body = markdown.toHTML(parsed.body);
		post.script = as[getRand()];
		res.render('resume', post);
	});
});

app.get('/blog',function(req,res){
  //res.render('contact');
	var file = './blog/allposts.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		var post = parsed.attributes;
		post.body = markdown.toHTML(parsed.body);
		post.script = as[getRand()];
		res.render('blog', post);
	});
});

app.get('/contact',function(req,res){
  //res.render('contact');
	var file = './core/contact.md';
	fs.readFile(file, 'utf8', function (err,data) {
		var parsed = jsonFm(data);
		var post = parsed.attributes;
		post.body = markdown.toHTML(parsed.body);
		post.script = as[getRand()];
		res.render('contact', post);
	});
});

app.get('/projects',function(req,res,next){
  var context = {};
  mysql.pool.query('SELECT * FROM pjs_list WHERE id NOT IN (5) order by id desc', function(err, rows, fields){
    if(err){ next(err); return; }
    //context.results = JSON.stringify(rows);
		rows.forEach(function(r){
			mysql.pool.query('SELECT * FROM links WHERE pjs_id=?',[r.id],function(err, rows, fields){
				r['links'] = rows;
			});
		});
    //context.results = rows;
		//res.render('pjs', context);

		var file = './core/projects.md';
		fs.readFile(file, 'utf8', function (err,data) {
			var parsed = jsonFm(data);
			var post = parsed.attributes;
			post.projects = rows;
			post.body = markdown.toHTML(parsed.body);
		post.script = as[getRand()];
			res.render('pjs', post);
		});
			//res.header("Content-Type",'application/json');
			//res.send(JSON.stringify(post, null, 4));
		//res.json(context);
  });
});


/*
//API configurration
var apiOptions = {
	context: '/',
	domain:require('domain').create(),
};

var Rest = rest.create(apiOptions)
app.use(Rest.processRequest());
app.use(subdomain('api', router));

//define API routes here
router.get('/projects-api', function(req, content, cb) {
  var context = {};
  mysql.pool.query('SELECT * FROM pjs_list order by id desc', function(err, rows, fields){
		cb(null, rows.map(function(a){
			return { id:a.id, name:a.name, msg:a.msg}
		}));
  });
});
*/

/**
app.get('/pjs',function(req,res){
  res.render('projects');
});
	//mysql.pool.query('INSERT INTO workouts (name,reps,weight,date,lbs) values (?)', 
*/


/*
app.get('/reset-table',function(req,res,next){
  var context = {};
  mysql.pool.query("DROP TABLE IF EXISTS workouts", function(err){ //replace your connection pool with the your variable containing the connection pool
    var createString = "CREATE TABLE workouts("+
    "id INT PRIMARY KEY AUTO_INCREMENT,"+
    "name VARCHAR(255) NOT NULL,"+
    "reps INT,"+
    "weight INT,"+
    "date DATE,"+
    "lbs BOOLEAN)";
    mysql.pool.query(createString, function(err){
      context.results = "Table reset";
      res.render('test',context);
    })                                                                    
  });
});

app.get('/show',function(req,res,next){
  var context = {};
  mysql.pool.query('SELECT * FROM workouts', function(err, rows, fields){
    if(err){
      next(err);
      return;
    }
    //context.results = JSON.stringify(rows);
    context.results = rows;
		res.json(context);
  });
});
	//mysql.pool.query('INSERT INTO workouts (name,reps,weight,date,lbs) values (?)', 

app.post('/add',function(req,res,next){
  var context = {};
	mysql.pool.query('INSERT INTO workouts (`name`,`reps`,`weight`,`date`,`lbs`) values (?,?,?,?,?)', 
		[req.body.name, req.body.reps,req.body.weight, req.body.date, req.body.lbs ], 
		function(err, result){
		if ( err ) {
			next( err );
			return;
		}
		if ( result.affectedRows ){
			mysql.pool.query( 'SELECT * FROM workouts WHERE id=?',
				[result.insertId],
				function(err, rows, fields){
				if ( err ) {
					next( err );
					return;
				}
			context.results = rows;
			res.json(context);
			//console.log(rows);
			});
		}
	});
});

app.get('/remove',function(req,res,next){
  var context = {};
  mysql.pool.query("delete from workouts WHERE id=? ",
    [req.query.id],
    function(err, result){
			console.log(result);
    if(err){
      next(err);
      return;
    }
    context.results = "Deleted " + result.affectedRows + " rows.";
		console.log(context);
		res.send(JSON.stringify(context));
  });
});

app.post('/update',function(req,res,next){
  var context = {};
  mysql.pool.query("UPDATE workouts SET name=?, reps=?, weight=?, date=?, lbs= ? WHERE id=? ",
		[req.body.name, req.body.reps,req.body.weight, req.body.date, req.body.lbs, req.body.id ], 
    function(err, result){
    if(err){
      next(err);
      return;
    }
		if ( result.affectedRows ){
			mysql.pool.query( 'SELECT * FROM workouts WHERE id=?',
				[req.body.id],
				function(err, rows, fields){
				if ( err ) {
					next( err );
					return;
				}
			context.results = rows;
			res.json(context);
			console.log(rows);
			});
		}
  });
});


app.get('/reset-table',function(req,res,next){
  var context = {};
  mysql.pool.query("DROP TABLE IF EXISTS todo", function(err){
    var createString = "CREATE TABLE todo(" +
    "id INT PRIMARY KEY AUTO_INCREMENT," +
    "name VARCHAR(255) NOT NULL," +
    "done BOOLEAN," +
    "due DATE)";
    mysql.pool.query(createString, function(err){
      context.results = "Table reset";
      res.render('test',context);
    })
  });
});
*/

/*
app.get('/insert',function(req,res,next){
  var context = {};
  mysql.pool.query("INSERT INTO todo (`name`) VALUES (?)", [req.query.c], function(err, result){
    if(err){
      next(err);
      return;
    }
    context.results = "Inserted id " + result.insertId;
    res.render('test',context);
  });
});

app.get('/show',function(req,res,next){
  var context = {};
  mysql.pool.query('SELECT * FROM todo', function(err, rows, fields){
    if(err){
      next(err);
      return;
    }
    //context.results = JSON.stringify(rows);
    context.results = rows;
    res.render('test', context);
  });
});

app.get('/simple-update',function(req,res,next){
  var context = {};
  mysql.pool.query("UPDATE todo SET name=?, done=?, due=? WHERE id=? ",
    [req.query.name, req.query.done, req.query.due, req.query.id],
    function(err, result){
    if(err){
      next(err);
      return;
    }
    context.results = "Updated " + result.changedRows + " rows.";
    res.render('home',context);
  });
});

app.get('/safe-update',function(req,res,next){
  var context = {};
  mysql.pool.query("SELECT * FROM todo WHERE id=?", [req.query.id], function(err, result){
    if(err){
      next(err);
      return;
    }
    if(result.length == 1){
      var curVals = result[0];
      mysql.pool.query("UPDATE todo SET name=?, done=?, due=? WHERE id=? ",
        [req.query.name || curVals.name, req.query.done || curVals.done, req.query.due || curVals.due, req.query.id],
        function(err, result){
        if(err){
          next(err);
          return;
        }
        context.results = "Updated " + result.changedRows + " rows.";
        res.render('test',context);
      });
    }
  });
});


app.get('/delete',function(req,res,next){
  var context = {};
  mysql.pool.query("delete from todo WHERE id=? ",
    [req.query.id],
    function(err, result){
			console.log(result);
    if(err){
      next(err);
      return;
    }
    context.results = "Deleted " + result.affectedRows + " rows.";
    res.render('home',context);
  });
});



app.get('/double',function(req,res,next){
  var context = {};
  request("http://api.opencagedata.com/geocode/v1/json?query="+city+","+state+"&pretty=1&key="+appID, function(error, response, body) {
  if ( !error && response.statusCode < 400 ) {
  context.site1 = body;
  request("http://api.open-notify.org/iss-now.json?",
  function(error, response, body) {
  if ( !error && response.statusCode < 400 ) {
  context.site2 = body;
  res.render('test',context);
  }
  else{
  console.log(error);
  if ( response)
  next(error);
  }
  });
  }
  else{
  console.log(error);
  if ( response )
  console.log(response);
  next(error);
  }
  });
});
//next request


app.get('/',function(req,res,next){
  var context = {};
  //If there is no session, go to the main page.
  if(!req.session.name){
    res.render('newSession', context);
    return;
  }
  context.name = req.session.name;
  context.toDoCount = req.session.toDo.length || 0;
  context.toDo = req.session.toDo || [];
  console.log(context.toDo);
  context.name = req.query.name;
  res.render('toDo',context);
});


app.post('/',function(req,res){
  var context = {};

  if(req.body['New List']){
    req.session.name = req.body.name;
    req.session.toDo = [];
    req.session.curId = 0;
  }

  //If there is no session, go to the main page.
  if(!req.session.name){
    res.render('newSession', context);
    return;
  }
  if(req.body['Add Item']){
    req.session.toDo.push({
    "name":req.body.name, 
    "city":req.body.city,
    "temp":req.body.temp,
    "id":req.session.curId});
    req.session.curId++;
  }


  if(req.body['Done']){
    req.session.toDo = req.session.toDo.filter(function(e){
      return e.id != req.body.id;
    })
  }

  let request = req.session.toDo.map((item) => {
    return new Promise((resolve) => {
      checkState(item, resolve);
    });
  });
  Promise.all(request).then(() => {
  context.name = req.session.name;
  context.toDoCount = req.session.toDo.length;
  context.toDo = req.session.toDo;
  console.log(context.toDo);
  res.render('toDo',context);
  });
});

function checkState(item,resolve){
  var appendUnit = "&units=imperial";
  request("http://api.openweathermap.org/data/2.5/weather?zip="+item.city+",us&appid="+owaID+appendUnit, function(err, response, body){
    if ( !err && response.statusCode < 400 ){
      var result = JSON.parse(body).main.temp;
      if ( result >= item.temp ){
        item.className = "OK";
	}
    }
    else{
      console.log(err);
      if ( response )
        console.log(response);
      next(err);
    }
    resolve();
  });
}
/*

app.get('/forms',function(req,res){
  var queryList = [];
  for ( var pair in req.query ) {
    queryList.push({'key':pair, 'value':req.query[pair]});
  }
  var queryObject = {'queryType':'GET', 'queryList':queryList};
  res.render('forms', queryObject);
});

var bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.post('/forms', function(req,res){
  var queryList = [];
  for ( var pair in req.body ) {
    queryList.push({'key':pair, 'value':req.body[pair]});
  }
console.log(req.body);
console.log(queryList);
  var queryObject = {'queryType':'POST', 'queryList':queryList};
  res.render('forms', queryObject);
});
*/


function getRandObj(){
  var number = {'number':getRand(min,max)};
  return number;
}

app.get('/random',function(req,res){
  res.render('random', getRandObj() );
});


app.use(function(req,res){
  res.status(404);
  res.render('404');
});

app.use(function(err, req, res, next){
  console.error(err.stack);
  res.type('plain/text');
  res.status(500);
  res.render('500');
});

app.listen(app.get('port'), function(){
  console.log('Express started on http://localhost:' + app.get('port') + '; press Ctrl-C to terminate.');
});
https.createServer(options, app).listen(8443);

/*
var server = https.createServer(options, app).listen(app.get('port'), function(){
	  console.log("Express server listening on port " + app.get('port'));
});
*/
